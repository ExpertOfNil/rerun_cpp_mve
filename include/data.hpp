#ifndef POSE_DATA_HPP
#define POSE_DATA_HPP

#include <array>
#include <opencv2/core.hpp>
#include <vector>

namespace data {
inline const cv::Matx33d CAMERA_MATRIX = {
    // clang-format off
    1901.634,    0.000, 1227.497,
       0.000, 1901.634,  998.426,
       0.000,    0.000,    1.000
    // clang-format on
};

inline const std::vector<std::array<cv::Matx31d, 2>> POSES = {
    // clang-format off
    {cv::Matx31d(1.89555, 0.516884, 1.95006), cv::Matx31d(-2.24814, -17.5293, -42.9695)},
    {cv::Matx31d(1.90375, 0.515313, 1.93511), cv::Matx31d(-12.4621, -17.8111, -42.9720)},
    {cv::Matx31d(1.90259, 0.514211, 1.93388), cv::Matx31d(-22.8503, -17.4467, -42.9661)},
    {cv::Matx31d(1.91592, 0.512709, 1.91910), cv::Matx31d(-33.6827, -17.1720, -42.8695)},
    {cv::Matx31d(1.91013, 0.510408, 1.92900), cv::Matx31d(-42.9085, -16.5996, -43.3746)},
    {cv::Matx31d(1.90693, 0.512966, 1.93315), cv::Matx31d(-52.8615, -16.8373, -43.3465)},
    {cv::Matx31d(1.90349, 0.515020, 1.93607), cv::Matx31d(-62.7236, -17.2065, -43.4505)},
    {cv::Matx31d(1.90495, 0.514742, 1.93638), cv::Matx31d(-72.8131, -16.9420, -43.7959)},
    {cv::Matx31d(1.90884, 0.515185, 1.92850), cv::Matx31d(-83.1373, -16.8592, -43.5902)},
    {cv::Matx31d(1.90542, 0.511276, 1.93236), cv::Matx31d(-92.9025, -16.7532, -44.1121)},
    {cv::Matx31d(1.89647, 0.517504, 1.94961), cv::Matx31d(-2.35876, -17.4905, -42.9590)},
    {cv::Matx31d(1.91194, 0.512061, 1.93264), cv::Matx31d(-13.3721, -17.1905, -42.8143)},
    {cv::Matx31d(1.91036, 0.508157, 1.93340), cv::Matx31d(-23.2503, -16.8630, -43.0055)},
    {cv::Matx31d(1.92063, 0.507546, 1.92007), cv::Matx31d(-33.4825, -16.8528, -42.7321)},
    {cv::Matx31d(1.91577, 0.508808, 1.92651), cv::Matx31d(-43.3425, -16.5581, -43.0667)},
    {cv::Matx31d(1.91104, 0.510234, 1.93174), cv::Matx31d(-53.0143, -16.7041, -43.2175)},
    {cv::Matx31d(1.90815, 0.511178, 1.93514), cv::Matx31d(-62.7848, -16.9899, -43.5800)},
    {cv::Matx31d(1.90894, 0.512011, 1.93485), cv::Matx31d(-72.9918, -16.7889, -43.8480)},
    {cv::Matx31d(1.91061, 0.515007, 1.92633), cv::Matx31d(-83.3041, -17.0002, -43.4516)},
    {cv::Matx31d(1.90501, 0.511783, 1.93165), cv::Matx31d(-92.8829, -16.8107, -44.1747)},
    {cv::Matx31d(1.89473, 0.518436, 1.94914), cv::Matx31d(-2.26642, -17.4884, -43.0098)},
    {cv::Matx31d(1.90534, 0.515551, 1.93372), cv::Matx31d(-12.5142, -17.8050, -42.9945)},
    {cv::Matx31d(1.90138, 0.516064, 1.93304), cv::Matx31d(-22.3773, -18.1651, -42.7479)},
    {cv::Matx31d(1.91901, 0.512952, 1.91641), cv::Matx31d(-33.8181, -17.4067, -42.9248)},
    {cv::Matx31d(1.91083, 0.510983, 1.92817), cv::Matx31d(-42.8800, -16.6979, -43.3440)},
    {cv::Matx31d(1.90681, 0.512623, 1.93255), cv::Matx31d(-52.7686, -16.7594, -43.4265)},
    {cv::Matx31d(1.90562, 0.514227, 1.93407), cv::Matx31d(-62.8031, -16.9837, -43.3374)},
    {cv::Matx31d(1.90414, 0.515325, 1.93520), cv::Matx31d(-72.6567, -17.1794, -43.7677)},
    {cv::Matx31d(1.91220, 0.515101, 1.92638), cv::Matx31d(-83.3703, -16.8997, -43.3448)},
    {cv::Matx31d(1.90399, 0.511885, 1.93326), cv::Matx31d(-92.5893, -16.8291, -44.1271)},
    {cv::Matx31d(1.89667, 0.518205, 1.94865), cv::Matx31d(-2.39212, -17.5189, -42.9924)},
    {cv::Matx31d(1.90936, 0.513948, 1.93306), cv::Matx31d(-12.9091, -17.5299, -42.9759)},
    {cv::Matx31d(1.90960, 0.510749, 1.93186), cv::Matx31d(-23.2272, -17.0124, -42.9204)},
    {cv::Matx31d(1.92151, 0.510566, 1.91652), cv::Matx31d(-33.9143, -16.9571, -42.8052)},
    {cv::Matx31d(1.91409, 0.510940, 1.92485), cv::Matx31d(-43.2081, -16.7245, -42.9967)},
    {cv::Matx31d(1.90821, 0.513852, 1.92978), cv::Matx31d(-52.9257, -16.9549, -43.1721)},
    {cv::Matx31d(1.90668, 0.514336, 1.93321), cv::Matx31d(-62.8748, -17.0038, -43.4344)},
    {cv::Matx31d(1.90628, 0.514923, 1.93412), cv::Matx31d(-72.8699, -16.9054, -43.6785)},
    {cv::Matx31d(1.90991, 0.516563, 1.92521), cv::Matx31d(-83.2756, -17.1546, -43.2926)},
    {cv::Matx31d(1.90550, 0.511768, 1.93217), cv::Matx31d(-92.8634, -16.6007, -44.0640)},
    {cv::Matx31d(1.90494, 0.516027, 1.94486), cv::Matx31d(-3.61560, -16.7930, -43.1831)},
    {cv::Matx31d(1.91276, 0.516767, 1.92572), cv::Matx31d(-13.9677, -17.9609, -42.7592)},
    {cv::Matx31d(1.90669, 0.513080, 1.93124), cv::Matx31d(-22.9011, -17.4499, -42.8723)},
    {cv::Matx31d(1.91423, 0.513312, 1.91847), cv::Matx31d(-33.0614, -17.5337, -42.4950)},
    {cv::Matx31d(1.91418, 0.511242, 1.92415), cv::Matx31d(-43.3161, -16.6331, -43.0445)},
    {cv::Matx31d(1.90698, 0.512590, 1.93127), cv::Matx31d(-52.6316, -16.8589, -43.3232)},
    {cv::Matx31d(1.90719, 0.513937, 1.93309), cv::Matx31d(-62.9281, -16.9241, -43.4345)},
    {cv::Matx31d(1.90529, 0.515770, 1.93429), cv::Matx31d(-72.8564, -17.0461, -43.8272)},
    {cv::Matx31d(1.90851, 0.514906, 1.92904), cv::Matx31d(-82.9266, -16.8378, -43.6350)},
    {cv::Matx31d(1.90463, 0.511929, 1.93327), cv::Matx31d(-92.7762, -16.6286, -44.1585)},
    // clang-format on
};
}  // namespace data
#endif /* POSE_DATA_HPP */
